******************************************************************************
asynchronous javascript														 *
******************************************************************************

What do we mean by SYNCHRONOUS???
	- all lines of javascript get executed one after another, line by line like they are written in the code.
	
What do we mean by ASYNCHRONOUS???
	-code that runs separate to other code in a Javascript file
		-runs in "background"
		- we pass callbacks that run when the async piece has finished its work
		-moves on immediately after firing. we do not wait for function to finish to move on!!
			EX. function to load an image to a webpage... it has to be asynchronous because it could ruin an entire website
			if it had to wait for the image to load before doing anything else
	
FIRST ASYNCHRONOUS EXAMPLE:
	
	- running a line of code that will actually execute seconds after being called:
		const second = () => {
            setTimeout(() => {
                console.log('whats up async!!!');
            }, 2000);
        }    
		
EVENT LOOP

	- part of the javascript context that waits for callbacks to be pushed to the message queue. Once the execution context stack is
	empty, the event loop will then run each of the callbacks that are inside of the message queue.
		- basically all of these callbacks are messages/etc from asynchronous calls.
			ex. const second = () => {
					setTimeout(() => {
					console.log('whats up async!!!');
				}, 2000);
				}   
						
			- the callback function that logs ('whats up async') will be moved to the message queue once the timer has completed
			its 2 second count

WEB APIS

	- asynchronous calls like setTimeout(), DOM Events, and XMLHttpRequests run here. after these run, whatever the callback method is will get stored in 
	the message queue to be added to the execution context by the event loop once the execution context is empty
		ex. const second = () => {
				setTimeout(() => {
				console.log('whats up async!!!');
			}, 2000);
			}   
		
		- the setTimeout() function will run for the 2 seconcds that it is supposed to inside of the Web APIs space. another example of this would be DOM event listeners waiting
		here for an event to occur, then the callback function would get added to the message queue to ultimately be picked up by the event loop and moved to the execution context for
		execution.

MESSAGE QUEUE

	- this queue stores the callback functions that are moved from the web apis when the web api functionalities are completed. The callbacks then
	wait to be picked up by the event loop when the execution context is empty.
		ex. const second = () => {
				setTimeout(() => {
				console.log('whats up async!!!');
			}, 2000);
			}  
			
		- in this situation, the timer will run for 2 seconds. when the timer completes, the callback function will then move to the message queue to wait
		to be picked up by the event loop and executed in the execution context

CALLBACK HELL - Avoid this!!!

	- this means that you end up having callback inside of callback inside of callback, over and over and over.

PROMISES:

	- WHAT ARE THEY?? an object that keeps track of whether a certain event has happened
		Then it determines what happens after the event occurs
		
	-STATES OF A PROMISE - 
		PENDING
			-> EVENT HAPPENS
				-> SETTLED/RESOLVED
					->FULFILLED (success)
					->REJECTED (failure)
						- we can handle these two situations in our code
						
	EX: const getIDs = new Promise((resolve, reject) => {
        
        }); 
		
		- The resolve and reject inside of the callback function return if the Promise was successful or not.
	
	EX: (promises with "then" and "catch" to handle successful and unsuccessful promises)
	    const getIDs = new Promise((resolve, reject) => {
            setTimeout(() => {
                reject([12, 122, 321, 5432]);
            }, 1000);
        });
        
        getIDs
        .then(IDs => { //The argument is the product of the successful promise
            console.log(IDs);
        })
        .catch(error => {
            console.log(error); 
        });
		
			-"THEN" is set up to catch whatever comes from the "resolve", with the IDs being whatever is passed to the "resolve" function
			-"CATCH" is set up to catch whatever comes from the "reject", with the error being whatever is passed to the "reject" function
			
	- Essentially it seems as though one promise will get created to pull data from somewhere. Then, that result can be passed to another promise and repeated until we have all of the data we need.
	Ideally I believe we should only have ONE promise, even if we can make a chain, but sometimes that's not completely possible

ASYNC/AWAIT:
	
	- inside of an ASYNC function, we can have one or more AWAIT expressions
	
AJAX

	- ASYCHRONOUS JAVASCRIPT AND XML
	
		-can use "FETCH"
			- fetch can get an API string passed to it and it will run like a promise - goes to then block
			if it runs successfully, to the catch block if an error returns
				fetch('apiString')
				.then(result => {
					do_something_with_result...
				})
				.catch(error => {
					do_something_with_error...
				});
				
AJAX WITH ASYNC/AWAIT -

	-rather than doing a fetch like above (with the then and catch block) you can use awaits in an async function to turn those block lines to only a few lines:
		EX. the top can be shortened to:
			async function doSomething(something){
				const result = await fetch('apiString');
				const data = await result.json();
				//do something with "data"...
			}
			
				To do this above, you would need multiple "then" blocks with each promise you are creating. In this situation,
				you only need to use "awaits" instead of new "then" blocks each time you are promising
				
	- HOW TO CATCH ERRORS!!!
		- like normal java, you need a "try/catch" block! very similar to normal java!
			-try{
				//do something involving promises
			}catch(error){
				//do something because of error
				console.log(error);
			}
 		

	