******************************************************************************
modern javascript - using es6, npm, babel, and webpack						 *
******************************************************************************

MVC - MODEL VIEW CONTROLLER

	- model (data and the application logic) - makes the api calls to pull and handle data
	
	- controller - brings the two together so they are not dependent on each other (model and view never have to communicate)
	
	- view (gets and displays data from and to the UI ) - displays the results of the action

Defining an export/import:

	-Export - simply use the export keyword followed by a function/variable you want to export:
		Ex.
			export const add = (a, b) => a + b;
			export const multiply = (a, b) => a * b;
			export const ID = 23;
			
	-Import - simply use the import keyword followed by the name you will be saving the import to, the from keyword, and finally
	the location of the file that contains the export that you want to import.
		Ex.
			import string from './models/Search';
			import { add, multiply, ID } from './views/searchView';

CREATING A DATA MODEL (my own observations):

	- every application has a data model
		-storing data
		-manipulating data
			EX. if we are storing information about "People" we want all of the information pertaining to each "People" object
			to be able to be stored inside of that object (age, height, weight, etc.)
			- we ALSO need functions for calculating information that we can't just get from the static information being returned from our API call, etc
				EX. If we only get a birth year but we want an age, we will need a function that will calculate the age of the person within the scope of the object.
				
	- models need a controller to be able to take the data from the model and display it on the webpage

HASHCHANGE EVENT:

	- when a URL changes its HASH, a HASH CHANGE event is fired.
		Ex. when localhost:8080/#12345 changes to localhost:8080/#54321, an event is fired
		
THE MODEL/VIEW RELATIONSHIP

	- usually when defining some sort of data that is to be displayed on a site we need two things:
		- a model (this will store the data that will be displayed on the site and will also hold functions to modify the data as needed)
		- the viewer (this will work with the model (BUT NOT BE DEPENDENT ON IT) to essentially link the data to the UI)
			- by linking i mean adding it to the UI, deleting it from the UI, etc.
			- template strings come in VERY handy for this
				- essentially we can define a template string that is made up of HTML code, inject our model data into that code, and
				then render that HTML code on the webpage itself
	- EACH MODEL VIEW WILL HAVE A CONTROLLER THAT TIES THEM TOGETHER (BUT KEEPS THEM SEPARATE)